export const exportToCSV = (rows: any[], filename = 'leads.csv') => {
    if (!rows || rows.length === 0) return;

    const headers = Object.keys(rows[0]);
    const csvRows = [];

    // üîπ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
    csvRows.push(headers.join(';'));

    // üîπ –î–∞–Ω–Ω—ã–µ
    rows.forEach(row => {
        const values = headers.map(h => {
            const value = row[h] ?? '';
            // –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ; –∏–ª–∏ " ‚Äî –∑–∞–∫–ª—é—á–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            if (typeof value === 'string' && (value.includes(';') || value.includes('"'))) {
                return `"${value.replace(/"/g, '""')}"`;
            }
            return value;
        });
        csvRows.push(values.join(';'));
    });

    // üîπ UTF-8 BOM –¥–ª—è Excel
    const csvString = '\uFEFF' + csvRows.join('\r\n');

    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
};
